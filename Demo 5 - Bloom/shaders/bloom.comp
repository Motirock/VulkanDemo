#version 450

layout (set = 0, binding = 0, rgba8) uniform readonly image2D inputImage;

layout (set = 0, binding = 1, rgba8) uniform writeonly image2D outputImage;

layout(push_constant) uniform ColorBlock {
  uint width;
  uint height;
  uint horizontal;
} pushConstant;

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

float weights[5] = float[] (0.227027, 0.1945946, 0.1216216, 0.054054, 0.016216);

void main() {
    if (pushConstant.horizontal != 0) {
        for (int x = 0; x < pushConstant.width; x++) {
            ivec2 pixelCoords = ivec2(x, gl_GlobalInvocationID.y);
            vec4 color;
            for (int i = pixelCoords.x-4; i <= pixelCoords.x+4; i++) {
                if (i < 0 || i >= pushConstant.width) {
                    continue;
                }
                color += imageLoad(inputImage, ivec2(i, pixelCoords.y))*weights[abs(i-pixelCoords.x)];
            }
            imageStore(outputImage, pixelCoords, color);
        }
    }
    else {
        return;
        for (int y = 0; y < pushConstant.height; y++) {
            ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.x, y);
            vec4 color;
            for (int i = pixelCoords.y-4; i <= pixelCoords.y+4; i++) {
                if (i < 0 || i >= pushConstant.height) {
                    continue;
                }
                color += imageLoad(inputImage, ivec2(pixelCoords.x, i))*weights[abs(i-pixelCoords.y)];
            }
            imageStore(outputImage, pixelCoords, color);
        }
    }
}